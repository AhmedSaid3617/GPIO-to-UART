
GPIO_to_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000c98  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cc4  08000cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000cc4  08000cc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cc4  08000cc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cc8  08000cc8  00010cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08000cd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000cd8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000872d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015cd  00000000  00000000  000287a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005ecf  00000000  00000000  00029d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004c8  00000000  00000000  0002fc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000688  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007059  00000000  00000000  00030791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001c6e  00000000  00000000  000377ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c64  00000000  00000000  00039458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c80 	.word	0x08000c80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000c80 	.word	0x08000c80

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b500      	push	{lr}
 800014e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2224      	movs	r2, #36	; 0x24
 8000152:	2100      	movs	r1, #0
 8000154:	a807      	add	r0, sp, #28
 8000156:	f000 fd66 	bl	8000c26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015a:	2214      	movs	r2, #20
 800015c:	2100      	movs	r1, #0
 800015e:	a801      	add	r0, sp, #4
 8000160:	f000 fd61 	bl	8000c26 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000164:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000166:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000168:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800016a:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800016c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800016e:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000172:	f000 fa71 	bl	8000658 <HAL_RCC_OscConfig>
 8000176:	4601      	mov	r1, r0
 8000178:	b108      	cbz	r0, 800017e <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800017a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800017c:	e7fe      	b.n	800017c <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800017e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000180:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000184:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000188:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800018a:	a801      	add	r0, sp, #4
 800018c:	f000 fc26 	bl	80009dc <HAL_RCC_ClockConfig>
 8000190:	b108      	cbz	r0, 8000196 <SystemClock_Config+0x4a>
 8000192:	b672      	cpsid	i
	while (1) {
 8000194:	e7fe      	b.n	8000194 <SystemClock_Config+0x48>
}
 8000196:	b011      	add	sp, #68	; 0x44
 8000198:	f85d fb04 	ldr.w	pc, [sp], #4

0800019c <main>:
{
 800019c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 800019e:	f000 f905 	bl	80003ac <HAL_Init>
  SystemClock_Config();
 80001a2:	f7ff ffd3 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a6:	2210      	movs	r2, #16
 80001a8:	2100      	movs	r1, #0
 80001aa:	a802      	add	r0, sp, #8
 80001ac:	f000 fd3b 	bl	8000c26 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001b0:	4b20      	ldr	r3, [pc, #128]	; (8000234 <main+0x98>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001b6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001b8:	481f      	ldr	r0, [pc, #124]	; (8000238 <main+0x9c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ba:	f042 0210 	orr.w	r2, r2, #16
 80001be:	619a      	str	r2, [r3, #24]
 80001c0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c4:	f002 0210 	and.w	r2, r2, #16
 80001c8:	9200      	str	r2, [sp, #0]
 80001ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001cc:	699a      	ldr	r2, [r3, #24]
 80001ce:	f042 0204 	orr.w	r2, r2, #4
 80001d2:	619a      	str	r2, [r3, #24]
 80001d4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d8:	f003 0304 	and.w	r3, r3, #4
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001e0:	f000 fa34 	bl	800064c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001e8:	2301      	movs	r3, #1
 80001ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f0:	4811      	ldr	r0, [pc, #68]	; (8000238 <main+0x9c>)
 80001f2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	e9cd 4304 	strd	r4, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f8:	f000 f952 	bl	80004a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <main+0x9c>)
 8000202:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000204:	e9cd 3402 	strd	r3, r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000208:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800020a:	f000 f949 	bl	80004a0 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 800020e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000212:	480a      	ldr	r0, [pc, #40]	; (800023c <main+0xa0>)
  huart1.Init.BaudRate = 115200;
 8000214:	490a      	ldr	r1, [pc, #40]	; (8000240 <main+0xa4>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000216:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800021a:	e9c0 1300 	strd	r1, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800021e:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8000220:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000222:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000226:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000228:	f000 fcce 	bl	8000bc8 <HAL_UART_Init>
 800022c:	b108      	cbz	r0, 8000232 <main+0x96>
 800022e:	b672      	cpsid	i
	while (1) {
 8000230:	e7fe      	b.n	8000230 <main+0x94>
	while (1) {
 8000232:	e7fe      	b.n	8000232 <main+0x96>
 8000234:	40021000 	.word	0x40021000
 8000238:	40011000 	.word	0x40011000
 800023c:	20000028 	.word	0x20000028
 8000240:	40013800 	.word	0x40013800

08000244 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_MspInit+0x3c>)
{
 8000246:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	f042 0201 	orr.w	r2, r2, #1
 800024e:	619a      	str	r2, [r3, #24]
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	f002 0201 	and.w	r2, r2, #1
 8000256:	9200      	str	r2, [sp, #0]
 8000258:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800025a:	69da      	ldr	r2, [r3, #28]
 800025c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000260:	61da      	str	r2, [r3, #28]
 8000262:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800026a:	9301      	str	r3, [sp, #4]
 800026c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800026e:	6853      	ldr	r3, [r2, #4]
 8000270:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800027a:	b002      	add	sp, #8
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40010000 	.word	0x40010000

08000288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000288:	b510      	push	{r4, lr}
 800028a:	4604      	mov	r4, r0
 800028c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	2210      	movs	r2, #16
 8000290:	2100      	movs	r1, #0
 8000292:	a802      	add	r0, sp, #8
 8000294:	f000 fcc7 	bl	8000c26 <memset>
  if(huart->Instance==USART1)
 8000298:	6822      	ldr	r2, [r4, #0]
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <HAL_UART_MspInit+0x70>)
 800029c:	429a      	cmp	r2, r3
 800029e:	d128      	bne.n	80002f2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80002a0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80002a4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a6:	4815      	ldr	r0, [pc, #84]	; (80002fc <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80002a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002ac:	619a      	str	r2, [r3, #24]
 80002ae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80002b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80002b6:	9200      	str	r2, [sp, #0]
 80002b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	699a      	ldr	r2, [r3, #24]
 80002bc:	f042 0204 	orr.w	r2, r2, #4
 80002c0:	619a      	str	r2, [r3, #24]
 80002c2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002d0:	2302      	movs	r3, #2
 80002d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d6:	2303      	movs	r3, #3
 80002d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002da:	f000 f8e1 	bl	80004a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f000 f8d7 	bl	80004a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80002f2:	b006      	add	sp, #24
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	bf00      	nop
 80002f8:	40013800 	.word	0x40013800
 80002fc:	40010800 	.word	0x40010800

08000300 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000300:	e7fe      	b.n	8000300 <NMI_Handler>

08000302 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <HardFault_Handler>

08000304 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <MemManage_Handler>

08000306 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <BusFault_Handler>

08000308 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler>

0800030a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	4770      	bx	lr

0800030c <DebugMon_Handler>:
 800030c:	4770      	bx	lr

0800030e <PendSV_Handler>:
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000310:	f000 b85e 	b.w	80003d0 <HAL_IncTick>

08000314 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000314:	4770      	bx	lr
	...

08000318 <Reset_Handler>:
 8000318:	f7ff fffc 	bl	8000314 <SystemInit>
 800031c:	480b      	ldr	r0, [pc, #44]	; (800034c <LoopFillZerobss+0xe>)
 800031e:	490c      	ldr	r1, [pc, #48]	; (8000350 <LoopFillZerobss+0x12>)
 8000320:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <LoopFillZerobss+0x16>)
 8000322:	2300      	movs	r3, #0
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:
 8000326:	58d4      	ldr	r4, [r2, r3]
 8000328:	50c4      	str	r4, [r0, r3]
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:
 800032c:	18c4      	adds	r4, r0, r3
 800032e:	428c      	cmp	r4, r1
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>
 8000332:	4a09      	ldr	r2, [pc, #36]	; (8000358 <LoopFillZerobss+0x1a>)
 8000334:	4c09      	ldr	r4, [pc, #36]	; (800035c <LoopFillZerobss+0x1e>)
 8000336:	2300      	movs	r3, #0
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:
 800033e:	42a2      	cmp	r2, r4
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>
 8000342:	f000 fc79 	bl	8000c38 <__libc_init_array>
 8000346:	f7ff ff29 	bl	800019c <main>
 800034a:	4770      	bx	lr
 800034c:	20000000 	.word	0x20000000
 8000350:	2000000c 	.word	0x2000000c
 8000354:	08000ccc 	.word	0x08000ccc
 8000358:	2000000c 	.word	0x2000000c
 800035c:	20000074 	.word	0x20000074

08000360 <ADC1_2_IRQHandler>:
 8000360:	e7fe      	b.n	8000360 <ADC1_2_IRQHandler>
	...

08000364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000364:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <HAL_InitTick+0x3c>)
{
 8000368:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000370:	fbb3 f3f2 	udiv	r3, r3, r2
 8000374:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <HAL_InitTick+0x40>)
 8000376:	6810      	ldr	r0, [r2, #0]
 8000378:	fbb0 f0f3 	udiv	r0, r0, r3
 800037c:	f000 f87c 	bl	8000478 <HAL_SYSTICK_Config>
 8000380:	4604      	mov	r4, r0
 8000382:	b958      	cbnz	r0, 800039c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000384:	2d0f      	cmp	r5, #15
 8000386:	d809      	bhi.n	800039c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000388:	4602      	mov	r2, r0
 800038a:	4629      	mov	r1, r5
 800038c:	f04f 30ff 	mov.w	r0, #4294967295
 8000390:	f000 f842 	bl	8000418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000394:	4620      	mov	r0, r4
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <HAL_InitTick+0x44>)
 8000398:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800039a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800039c:	2001      	movs	r0, #1
 800039e:	e7fc      	b.n	800039a <HAL_InitTick+0x36>
 80003a0:	20000004 	.word	0x20000004
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000008 	.word	0x20000008

080003ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_Init+0x20>)
{
 80003ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003b0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003b2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ba:	f000 f81b 	bl	80003f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80003be:	200f      	movs	r0, #15
 80003c0:	f7ff ffd0 	bl	8000364 <HAL_InitTick>
  HAL_MspInit();
 80003c4:	f7ff ff3e 	bl	8000244 <HAL_MspInit>
}
 80003c8:	2000      	movs	r0, #0
 80003ca:	bd08      	pop	{r3, pc}
 80003cc:	40022000 	.word	0x40022000

080003d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003d0:	4a03      	ldr	r2, [pc, #12]	; (80003e0 <HAL_IncTick+0x10>)
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <HAL_IncTick+0x14>)
 80003d4:	6811      	ldr	r1, [r2, #0]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	440b      	add	r3, r1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	20000070 	.word	0x20000070
 80003e4:	20000004 	.word	0x20000004

080003e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003e8:	4b01      	ldr	r3, [pc, #4]	; (80003f0 <HAL_GetTick+0x8>)
 80003ea:	6818      	ldr	r0, [r3, #0]
}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000070 	.word	0x20000070

080003f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003f6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000402:	0412      	lsls	r2, r2, #16
 8000404:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800040c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000410:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000412:	4770      	bx	lr
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800041a:	b530      	push	{r4, r5, lr}
 800041c:	68dc      	ldr	r4, [r3, #12]
 800041e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000422:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000426:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	2b04      	cmp	r3, #4
 800042a:	bf28      	it	cs
 800042c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800042e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000430:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000434:	bf94      	ite	ls
 8000436:	2400      	movls	r4, #0
 8000438:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800043a:	fa05 f303 	lsl.w	r3, r5, r3
 800043e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000442:	40a5      	lsls	r5, r4
 8000444:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000448:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800044a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000450:	bfac      	ite	ge
 8000452:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000456:	4a07      	ldrlt	r2, [pc, #28]	; (8000474 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000458:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800045c:	b2db      	uxtb	r3, r3
 800045e:	bfab      	itete	ge
 8000460:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000464:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000468:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	e000ed14 	.word	0xe000ed14

08000478 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000478:	3801      	subs	r0, #1
 800047a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800047e:	d20b      	bcs.n	8000498 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000484:	21f0      	movs	r1, #240	; 0xf0
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000488:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800048e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000490:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000492:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000494:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000496:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000498:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004a4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80004a6:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004a8:	4f61      	ldr	r7, [pc, #388]	; (8000630 <HAL_GPIO_Init+0x190>)
 80004aa:	4b62      	ldr	r3, [pc, #392]	; (8000634 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 80004ac:	f8df c188 	ldr.w	ip, [pc, #392]	; 8000638 <HAL_GPIO_Init+0x198>
 80004b0:	f8df e188 	ldr.w	lr, [pc, #392]	; 800063c <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004b4:	680d      	ldr	r5, [r1, #0]
 80004b6:	fa35 f406 	lsrs.w	r4, r5, r6
 80004ba:	d102      	bne.n	80004c2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80004bc:	b003      	add	sp, #12
 80004be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80004c2:	f04f 0801 	mov.w	r8, #1
 80004c6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ca:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80004ce:	ea38 0505 	bics.w	r5, r8, r5
 80004d2:	d176      	bne.n	80005c2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80004d4:	684d      	ldr	r5, [r1, #4]
 80004d6:	2d03      	cmp	r5, #3
 80004d8:	d807      	bhi.n	80004ea <HAL_GPIO_Init+0x4a>
 80004da:	3d01      	subs	r5, #1
 80004dc:	2d02      	cmp	r5, #2
 80004de:	f200 8081 	bhi.w	80005e4 <HAL_GPIO_Init+0x144>
 80004e2:	e8df f005 	tbb	[pc, r5]
 80004e6:	9691      	.short	0x9691
 80004e8:	9c          	.byte	0x9c
 80004e9:	00          	.byte	0x00
 80004ea:	2d12      	cmp	r5, #18
 80004ec:	f000 8094 	beq.w	8000618 <HAL_GPIO_Init+0x178>
 80004f0:	d869      	bhi.n	80005c6 <HAL_GPIO_Init+0x126>
 80004f2:	2d11      	cmp	r5, #17
 80004f4:	f000 808a 	beq.w	800060c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004f8:	2cff      	cmp	r4, #255	; 0xff
 80004fa:	bf98      	it	ls
 80004fc:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004fe:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000502:	bf88      	it	hi
 8000504:	f100 0a04 	addhi.w	sl, r0, #4
 8000508:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800050c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000510:	bf88      	it	hi
 8000512:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000514:	fa09 fb05 	lsl.w	fp, r9, r5
 8000518:	ea28 080b 	bic.w	r8, r8, fp
 800051c:	fa02 f505 	lsl.w	r5, r2, r5
 8000520:	ea48 0505 	orr.w	r5, r8, r5
 8000524:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000528:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800052c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000530:	d047      	beq.n	80005c2 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000532:	69bd      	ldr	r5, [r7, #24]
 8000534:	f026 0803 	bic.w	r8, r6, #3
 8000538:	f045 0501 	orr.w	r5, r5, #1
 800053c:	61bd      	str	r5, [r7, #24]
 800053e:	69bd      	ldr	r5, [r7, #24]
 8000540:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000544:	f005 0501 	and.w	r5, r5, #1
 8000548:	9501      	str	r5, [sp, #4]
 800054a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800054e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000552:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000554:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000558:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800055c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000560:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000564:	4d36      	ldr	r5, [pc, #216]	; (8000640 <HAL_GPIO_Init+0x1a0>)
 8000566:	42a8      	cmp	r0, r5
 8000568:	d05d      	beq.n	8000626 <HAL_GPIO_Init+0x186>
 800056a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800056e:	42a8      	cmp	r0, r5
 8000570:	d05b      	beq.n	800062a <HAL_GPIO_Init+0x18a>
 8000572:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000576:	42a8      	cmp	r0, r5
 8000578:	bf0c      	ite	eq
 800057a:	2502      	moveq	r5, #2
 800057c:	2503      	movne	r5, #3
 800057e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000582:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000586:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800058a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800058c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000590:	bf14      	ite	ne
 8000592:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000594:	43a5      	biceq	r5, r4
 8000596:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000598:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800059a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800059e:	bf14      	ite	ne
 80005a0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80005a2:	43a5      	biceq	r5, r4
 80005a4:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80005a6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005a8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005ac:	bf14      	ite	ne
 80005ae:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005b0:	43a5      	biceq	r5, r4
 80005b2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80005b4:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005b6:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005ba:	bf14      	ite	ne
 80005bc:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005be:	43a5      	biceq	r5, r4
 80005c0:	601d      	str	r5, [r3, #0]
	position++;
 80005c2:	3601      	adds	r6, #1
 80005c4:	e776      	b.n	80004b4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80005c6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000644 <HAL_GPIO_Init+0x1a4>
 80005ca:	454d      	cmp	r5, r9
 80005cc:	d00a      	beq.n	80005e4 <HAL_GPIO_Init+0x144>
 80005ce:	d815      	bhi.n	80005fc <HAL_GPIO_Init+0x15c>
 80005d0:	4575      	cmp	r5, lr
 80005d2:	d007      	beq.n	80005e4 <HAL_GPIO_Init+0x144>
 80005d4:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 80005d8:	454d      	cmp	r5, r9
 80005da:	d003      	beq.n	80005e4 <HAL_GPIO_Init+0x144>
 80005dc:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80005e0:	454d      	cmp	r5, r9
 80005e2:	d189      	bne.n	80004f8 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005e4:	688a      	ldr	r2, [r1, #8]
 80005e6:	b1e2      	cbz	r2, 8000622 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005e8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80005ea:	bf08      	it	eq
 80005ec:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005f0:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80005f4:	bf18      	it	ne
 80005f6:	f8c0 8014 	strne.w	r8, [r0, #20]
 80005fa:	e77d      	b.n	80004f8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80005fc:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000648 <HAL_GPIO_Init+0x1a8>
 8000600:	454d      	cmp	r5, r9
 8000602:	d0ef      	beq.n	80005e4 <HAL_GPIO_Init+0x144>
 8000604:	4565      	cmp	r5, ip
 8000606:	e7ec      	b.n	80005e2 <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000608:	68ca      	ldr	r2, [r1, #12]
          break;
 800060a:	e775      	b.n	80004f8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800060c:	68ca      	ldr	r2, [r1, #12]
 800060e:	3204      	adds	r2, #4
          break;
 8000610:	e772      	b.n	80004f8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000612:	68ca      	ldr	r2, [r1, #12]
 8000614:	3208      	adds	r2, #8
          break;
 8000616:	e76f      	b.n	80004f8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000618:	68ca      	ldr	r2, [r1, #12]
 800061a:	320c      	adds	r2, #12
          break;
 800061c:	e76c      	b.n	80004f8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800061e:	2200      	movs	r2, #0
 8000620:	e76a      	b.n	80004f8 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000622:	2204      	movs	r2, #4
 8000624:	e768      	b.n	80004f8 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000626:	2500      	movs	r5, #0
 8000628:	e7a9      	b.n	800057e <HAL_GPIO_Init+0xde>
 800062a:	2501      	movs	r5, #1
 800062c:	e7a7      	b.n	800057e <HAL_GPIO_Init+0xde>
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40010400 	.word	0x40010400
 8000638:	10320000 	.word	0x10320000
 800063c:	10120000 	.word	0x10120000
 8000640:	40010800 	.word	0x40010800
 8000644:	10220000 	.word	0x10220000
 8000648:	10310000 	.word	0x10310000

0800064c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800064c:	b10a      	cbz	r2, 8000652 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800064e:	6101      	str	r1, [r0, #16]
  }
}
 8000650:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000652:	0409      	lsls	r1, r1, #16
 8000654:	e7fb      	b.n	800064e <HAL_GPIO_WritePin+0x2>
	...

08000658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800065c:	4605      	mov	r5, r0
 800065e:	b338      	cbz	r0, 80006b0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	07db      	lsls	r3, r3, #31
 8000664:	d410      	bmi.n	8000688 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000666:	682b      	ldr	r3, [r5, #0]
 8000668:	079f      	lsls	r7, r3, #30
 800066a:	d45e      	bmi.n	800072a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	0719      	lsls	r1, r3, #28
 8000670:	f100 8095 	bmi.w	800079e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	075a      	lsls	r2, r3, #29
 8000678:	f100 80c1 	bmi.w	80007fe <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800067c:	69e8      	ldr	r0, [r5, #28]
 800067e:	2800      	cmp	r0, #0
 8000680:	f040 812c 	bne.w	80008dc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000684:	2000      	movs	r0, #0
 8000686:	e029      	b.n	80006dc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000688:	4c90      	ldr	r4, [pc, #576]	; (80008cc <HAL_RCC_OscConfig+0x274>)
 800068a:	6863      	ldr	r3, [r4, #4]
 800068c:	f003 030c 	and.w	r3, r3, #12
 8000690:	2b04      	cmp	r3, #4
 8000692:	d007      	beq.n	80006a4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000694:	6863      	ldr	r3, [r4, #4]
 8000696:	f003 030c 	and.w	r3, r3, #12
 800069a:	2b08      	cmp	r3, #8
 800069c:	d10a      	bne.n	80006b4 <HAL_RCC_OscConfig+0x5c>
 800069e:	6863      	ldr	r3, [r4, #4]
 80006a0:	03de      	lsls	r6, r3, #15
 80006a2:	d507      	bpl.n	80006b4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	039c      	lsls	r4, r3, #14
 80006a8:	d5dd      	bpl.n	8000666 <HAL_RCC_OscConfig+0xe>
 80006aa:	686b      	ldr	r3, [r5, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1da      	bne.n	8000666 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80006b0:	2001      	movs	r0, #1
 80006b2:	e013      	b.n	80006dc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006b4:	686b      	ldr	r3, [r5, #4]
 80006b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006ba:	d112      	bne.n	80006e2 <HAL_RCC_OscConfig+0x8a>
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006c4:	f7ff fe90 	bl	80003e8 <HAL_GetTick>
 80006c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	0398      	lsls	r0, r3, #14
 80006ce:	d4ca      	bmi.n	8000666 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006d0:	f7ff fe8a 	bl	80003e8 <HAL_GetTick>
 80006d4:	1b80      	subs	r0, r0, r6
 80006d6:	2864      	cmp	r0, #100	; 0x64
 80006d8:	d9f7      	bls.n	80006ca <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80006da:	2003      	movs	r0, #3
}
 80006dc:	b002      	add	sp, #8
 80006de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006e2:	b99b      	cbnz	r3, 800070c <HAL_RCC_OscConfig+0xb4>
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ea:	6023      	str	r3, [r4, #0]
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006f4:	f7ff fe78 	bl	80003e8 <HAL_GetTick>
 80006f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	0399      	lsls	r1, r3, #14
 80006fe:	d5b2      	bpl.n	8000666 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000700:	f7ff fe72 	bl	80003e8 <HAL_GetTick>
 8000704:	1b80      	subs	r0, r0, r6
 8000706:	2864      	cmp	r0, #100	; 0x64
 8000708:	d9f7      	bls.n	80006fa <HAL_RCC_OscConfig+0xa2>
 800070a:	e7e6      	b.n	80006da <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800070c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	d103      	bne.n	800071c <HAL_RCC_OscConfig+0xc4>
 8000714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000718:	6023      	str	r3, [r4, #0]
 800071a:	e7cf      	b.n	80006bc <HAL_RCC_OscConfig+0x64>
 800071c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000720:	6023      	str	r3, [r4, #0]
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000728:	e7cb      	b.n	80006c2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800072a:	4c68      	ldr	r4, [pc, #416]	; (80008cc <HAL_RCC_OscConfig+0x274>)
 800072c:	6863      	ldr	r3, [r4, #4]
 800072e:	f013 0f0c 	tst.w	r3, #12
 8000732:	d007      	beq.n	8000744 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000734:	6863      	ldr	r3, [r4, #4]
 8000736:	f003 030c 	and.w	r3, r3, #12
 800073a:	2b08      	cmp	r3, #8
 800073c:	d110      	bne.n	8000760 <HAL_RCC_OscConfig+0x108>
 800073e:	6863      	ldr	r3, [r4, #4]
 8000740:	03da      	lsls	r2, r3, #15
 8000742:	d40d      	bmi.n	8000760 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	079b      	lsls	r3, r3, #30
 8000748:	d502      	bpl.n	8000750 <HAL_RCC_OscConfig+0xf8>
 800074a:	692b      	ldr	r3, [r5, #16]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d1af      	bne.n	80006b0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	696a      	ldr	r2, [r5, #20]
 8000754:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000758:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800075c:	6023      	str	r3, [r4, #0]
 800075e:	e785      	b.n	800066c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000760:	692a      	ldr	r2, [r5, #16]
 8000762:	4b5b      	ldr	r3, [pc, #364]	; (80008d0 <HAL_RCC_OscConfig+0x278>)
 8000764:	b16a      	cbz	r2, 8000782 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fe3d 	bl	80003e8 <HAL_GetTick>
 800076e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	079f      	lsls	r7, r3, #30
 8000774:	d4ec      	bmi.n	8000750 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000776:	f7ff fe37 	bl	80003e8 <HAL_GetTick>
 800077a:	1b80      	subs	r0, r0, r6
 800077c:	2802      	cmp	r0, #2
 800077e:	d9f7      	bls.n	8000770 <HAL_RCC_OscConfig+0x118>
 8000780:	e7ab      	b.n	80006da <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000784:	f7ff fe30 	bl	80003e8 <HAL_GetTick>
 8000788:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	0798      	lsls	r0, r3, #30
 800078e:	f57f af6d 	bpl.w	800066c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000792:	f7ff fe29 	bl	80003e8 <HAL_GetTick>
 8000796:	1b80      	subs	r0, r0, r6
 8000798:	2802      	cmp	r0, #2
 800079a:	d9f6      	bls.n	800078a <HAL_RCC_OscConfig+0x132>
 800079c:	e79d      	b.n	80006da <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800079e:	69aa      	ldr	r2, [r5, #24]
 80007a0:	4e4a      	ldr	r6, [pc, #296]	; (80008cc <HAL_RCC_OscConfig+0x274>)
 80007a2:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <HAL_RCC_OscConfig+0x278>)
 80007a4:	b1e2      	cbz	r2, 80007e0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80007a6:	2201      	movs	r2, #1
 80007a8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80007ac:	f7ff fe1c 	bl	80003e8 <HAL_GetTick>
 80007b0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80007b4:	079b      	lsls	r3, r3, #30
 80007b6:	d50d      	bpl.n	80007d4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80007b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007bc:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <HAL_RCC_OscConfig+0x27c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80007c4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80007c6:	bf00      	nop
  }
  while (Delay --);
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f9      	bne.n	80007c6 <HAL_RCC_OscConfig+0x16e>
 80007d2:	e74f      	b.n	8000674 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007d4:	f7ff fe08 	bl	80003e8 <HAL_GetTick>
 80007d8:	1b00      	subs	r0, r0, r4
 80007da:	2802      	cmp	r0, #2
 80007dc:	d9e9      	bls.n	80007b2 <HAL_RCC_OscConfig+0x15a>
 80007de:	e77c      	b.n	80006da <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80007e0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80007e4:	f7ff fe00 	bl	80003e8 <HAL_GetTick>
 80007e8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80007ec:	079f      	lsls	r7, r3, #30
 80007ee:	f57f af41 	bpl.w	8000674 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007f2:	f7ff fdf9 	bl	80003e8 <HAL_GetTick>
 80007f6:	1b00      	subs	r0, r0, r4
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d9f6      	bls.n	80007ea <HAL_RCC_OscConfig+0x192>
 80007fc:	e76d      	b.n	80006da <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007fe:	4c33      	ldr	r4, [pc, #204]	; (80008cc <HAL_RCC_OscConfig+0x274>)
 8000800:	69e3      	ldr	r3, [r4, #28]
 8000802:	00d8      	lsls	r0, r3, #3
 8000804:	d424      	bmi.n	8000850 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8000806:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	69e3      	ldr	r3, [r4, #28]
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	61e3      	str	r3, [r4, #28]
 8000810:	69e3      	ldr	r3, [r4, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800081a:	4e2f      	ldr	r6, [pc, #188]	; (80008d8 <HAL_RCC_OscConfig+0x280>)
 800081c:	6833      	ldr	r3, [r6, #0]
 800081e:	05d9      	lsls	r1, r3, #23
 8000820:	d518      	bpl.n	8000854 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000822:	68eb      	ldr	r3, [r5, #12]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d126      	bne.n	8000876 <HAL_RCC_OscConfig+0x21e>
 8000828:	6a23      	ldr	r3, [r4, #32]
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000830:	f7ff fdda 	bl	80003e8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000834:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000838:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800083a:	6a23      	ldr	r3, [r4, #32]
 800083c:	079b      	lsls	r3, r3, #30
 800083e:	d53f      	bpl.n	80008c0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8000840:	2f00      	cmp	r7, #0
 8000842:	f43f af1b 	beq.w	800067c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000846:	69e3      	ldr	r3, [r4, #28]
 8000848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800084c:	61e3      	str	r3, [r4, #28]
 800084e:	e715      	b.n	800067c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000850:	2700      	movs	r7, #0
 8000852:	e7e2      	b.n	800081a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000854:	6833      	ldr	r3, [r6, #0]
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800085c:	f7ff fdc4 	bl	80003e8 <HAL_GetTick>
 8000860:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000862:	6833      	ldr	r3, [r6, #0]
 8000864:	05da      	lsls	r2, r3, #23
 8000866:	d4dc      	bmi.n	8000822 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000868:	f7ff fdbe 	bl	80003e8 <HAL_GetTick>
 800086c:	eba0 0008 	sub.w	r0, r0, r8
 8000870:	2864      	cmp	r0, #100	; 0x64
 8000872:	d9f6      	bls.n	8000862 <HAL_RCC_OscConfig+0x20a>
 8000874:	e731      	b.n	80006da <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000876:	b9ab      	cbnz	r3, 80008a4 <HAL_RCC_OscConfig+0x24c>
 8000878:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800087a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800087e:	f023 0301 	bic.w	r3, r3, #1
 8000882:	6223      	str	r3, [r4, #32]
 8000884:	6a23      	ldr	r3, [r4, #32]
 8000886:	f023 0304 	bic.w	r3, r3, #4
 800088a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800088c:	f7ff fdac 	bl	80003e8 <HAL_GetTick>
 8000890:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000892:	6a23      	ldr	r3, [r4, #32]
 8000894:	0798      	lsls	r0, r3, #30
 8000896:	d5d3      	bpl.n	8000840 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000898:	f7ff fda6 	bl	80003e8 <HAL_GetTick>
 800089c:	1b80      	subs	r0, r0, r6
 800089e:	4540      	cmp	r0, r8
 80008a0:	d9f7      	bls.n	8000892 <HAL_RCC_OscConfig+0x23a>
 80008a2:	e71a      	b.n	80006da <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	6a23      	ldr	r3, [r4, #32]
 80008a8:	d103      	bne.n	80008b2 <HAL_RCC_OscConfig+0x25a>
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6223      	str	r3, [r4, #32]
 80008b0:	e7ba      	b.n	8000828 <HAL_RCC_OscConfig+0x1d0>
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	6223      	str	r3, [r4, #32]
 80008b8:	6a23      	ldr	r3, [r4, #32]
 80008ba:	f023 0304 	bic.w	r3, r3, #4
 80008be:	e7b6      	b.n	800082e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008c0:	f7ff fd92 	bl	80003e8 <HAL_GetTick>
 80008c4:	1b80      	subs	r0, r0, r6
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d9b7      	bls.n	800083a <HAL_RCC_OscConfig+0x1e2>
 80008ca:	e706      	b.n	80006da <HAL_RCC_OscConfig+0x82>
 80008cc:	40021000 	.word	0x40021000
 80008d0:	42420000 	.word	0x42420000
 80008d4:	20000000 	.word	0x20000000
 80008d8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008dc:	4c2a      	ldr	r4, [pc, #168]	; (8000988 <HAL_RCC_OscConfig+0x330>)
 80008de:	6863      	ldr	r3, [r4, #4]
 80008e0:	f003 030c 	and.w	r3, r3, #12
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d03e      	beq.n	8000966 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008e8:	2200      	movs	r2, #0
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <HAL_RCC_OscConfig+0x334>)
 80008ec:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80008ee:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008f0:	d12c      	bne.n	800094c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80008f2:	f7ff fd79 	bl	80003e8 <HAL_GetTick>
 80008f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	0199      	lsls	r1, r3, #6
 80008fc:	d420      	bmi.n	8000940 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008fe:	6a2b      	ldr	r3, [r5, #32]
 8000900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000904:	d105      	bne.n	8000912 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000906:	6862      	ldr	r2, [r4, #4]
 8000908:	68a9      	ldr	r1, [r5, #8]
 800090a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800090e:	430a      	orrs	r2, r1
 8000910:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000912:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000914:	6862      	ldr	r2, [r4, #4]
 8000916:	430b      	orrs	r3, r1
 8000918:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800091c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800091e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000920:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_RCC_OscConfig+0x334>)
 8000924:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000926:	f7ff fd5f 	bl	80003e8 <HAL_GetTick>
 800092a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	019a      	lsls	r2, r3, #6
 8000930:	f53f aea8 	bmi.w	8000684 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000934:	f7ff fd58 	bl	80003e8 <HAL_GetTick>
 8000938:	1b40      	subs	r0, r0, r5
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x2d4>
 800093e:	e6cc      	b.n	80006da <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000940:	f7ff fd52 	bl	80003e8 <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	2802      	cmp	r0, #2
 8000948:	d9d6      	bls.n	80008f8 <HAL_RCC_OscConfig+0x2a0>
 800094a:	e6c6      	b.n	80006da <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800094c:	f7ff fd4c 	bl	80003e8 <HAL_GetTick>
 8000950:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	f57f ae95 	bpl.w	8000684 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800095a:	f7ff fd45 	bl	80003e8 <HAL_GetTick>
 800095e:	1b40      	subs	r0, r0, r5
 8000960:	2802      	cmp	r0, #2
 8000962:	d9f6      	bls.n	8000952 <HAL_RCC_OscConfig+0x2fa>
 8000964:	e6b9      	b.n	80006da <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000966:	2801      	cmp	r0, #1
 8000968:	f43f aeb8 	beq.w	80006dc <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800096c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800096e:	6a2a      	ldr	r2, [r5, #32]
 8000970:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000974:	4291      	cmp	r1, r2
 8000976:	f47f ae9b 	bne.w	80006b0 <HAL_RCC_OscConfig+0x58>
 800097a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800097c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000980:	4293      	cmp	r3, r2
 8000982:	f43f ae7f 	beq.w	8000684 <HAL_RCC_OscConfig+0x2c>
 8000986:	e693      	b.n	80006b0 <HAL_RCC_OscConfig+0x58>
 8000988:	40021000 	.word	0x40021000
 800098c:	42420000 	.word	0x42420000

08000990 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <HAL_RCC_GetSysClockFreq+0x38>)
 8000992:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000994:	f003 010c 	and.w	r1, r3, #12
 8000998:	2908      	cmp	r1, #8
 800099a:	d112      	bne.n	80009c2 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <HAL_RCC_GetSysClockFreq+0x3c>)
 800099e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009a2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009a4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009a6:	d509      	bpl.n	80009bc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009a8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009ac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009b0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x44>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80009ba:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x48>)
 80009be:	4358      	muls	r0, r3
 80009c0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	08000cb0 	.word	0x08000cb0
 80009d0:	007a1200 	.word	0x007a1200
 80009d4:	08000cc0 	.word	0x08000cc0
 80009d8:	003d0900 	.word	0x003d0900

080009dc <HAL_RCC_ClockConfig>:
{
 80009dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80009e2:	4604      	mov	r4, r0
 80009e4:	b910      	cbnz	r0, 80009ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
}
 80009e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80009ec:	4a44      	ldr	r2, [pc, #272]	; (8000b00 <HAL_RCC_ClockConfig+0x124>)
 80009ee:	6813      	ldr	r3, [r2, #0]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d328      	bcc.n	8000a4a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009f8:	6821      	ldr	r1, [r4, #0]
 80009fa:	078e      	lsls	r6, r1, #30
 80009fc:	d430      	bmi.n	8000a60 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009fe:	07ca      	lsls	r2, r1, #31
 8000a00:	d443      	bmi.n	8000a8a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000a02:	4a3f      	ldr	r2, [pc, #252]	; (8000b00 <HAL_RCC_ClockConfig+0x124>)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	42ab      	cmp	r3, r5
 8000a0c:	d865      	bhi.n	8000ada <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	4d3c      	ldr	r5, [pc, #240]	; (8000b04 <HAL_RCC_ClockConfig+0x128>)
 8000a12:	f012 0f04 	tst.w	r2, #4
 8000a16:	d16c      	bne.n	8000af2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a18:	0713      	lsls	r3, r2, #28
 8000a1a:	d506      	bpl.n	8000a2a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a1c:	686b      	ldr	r3, [r5, #4]
 8000a1e:	6922      	ldr	r2, [r4, #16]
 8000a20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a28:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000a2a:	f7ff ffb1 	bl	8000990 <HAL_RCC_GetSysClockFreq>
 8000a2e:	686b      	ldr	r3, [r5, #4]
 8000a30:	4a35      	ldr	r2, [pc, #212]	; (8000b08 <HAL_RCC_ClockConfig+0x12c>)
 8000a32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	40d8      	lsrs	r0, r3
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_RCC_ClockConfig+0x130>)
 8000a3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <HAL_RCC_ClockConfig+0x134>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f7ff fc8f 	bl	8000364 <HAL_InitTick>
  return HAL_OK;
 8000a46:	2000      	movs	r0, #0
 8000a48:	e7ce      	b.n	80009e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f023 0307 	bic.w	r3, r3, #7
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d1c3      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xa>
 8000a5e:	e7cb      	b.n	80009f8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <HAL_RCC_ClockConfig+0x128>)
 8000a62:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a66:	bf1e      	ittt	ne
 8000a68:	685a      	ldrne	r2, [r3, #4]
 8000a6a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000a6e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a70:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a72:	bf42      	ittt	mi
 8000a74:	685a      	ldrmi	r2, [r3, #4]
 8000a76:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000a7a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	68a0      	ldr	r0, [r4, #8]
 8000a80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a84:	4302      	orrs	r2, r0
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	e7b9      	b.n	80009fe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a8a:	6862      	ldr	r2, [r4, #4]
 8000a8c:	4e1d      	ldr	r6, [pc, #116]	; (8000b04 <HAL_RCC_ClockConfig+0x128>)
 8000a8e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a90:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a92:	d11a      	bne.n	8000aca <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a98:	d0a5      	beq.n	80009e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a9a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a9c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aa0:	f023 0303 	bic.w	r3, r3, #3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000aa8:	f7ff fc9e 	bl	80003e8 <HAL_GetTick>
 8000aac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000aae:	6873      	ldr	r3, [r6, #4]
 8000ab0:	6862      	ldr	r2, [r4, #4]
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000aba:	d0a2      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000abc:	f7ff fc94 	bl	80003e8 <HAL_GetTick>
 8000ac0:	1bc0      	subs	r0, r0, r7
 8000ac2:	4540      	cmp	r0, r8
 8000ac4:	d9f3      	bls.n	8000aae <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	e78e      	b.n	80009e8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aca:	2a02      	cmp	r2, #2
 8000acc:	d102      	bne.n	8000ad4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ace:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ad2:	e7e1      	b.n	8000a98 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad4:	f013 0f02 	tst.w	r3, #2
 8000ad8:	e7de      	b.n	8000a98 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	f023 0307 	bic.w	r3, r3, #7
 8000ae0:	432b      	orrs	r3, r5
 8000ae2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	42ab      	cmp	r3, r5
 8000aec:	f47f af7b 	bne.w	80009e6 <HAL_RCC_ClockConfig+0xa>
 8000af0:	e78d      	b.n	8000a0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000af2:	686b      	ldr	r3, [r5, #4]
 8000af4:	68e1      	ldr	r1, [r4, #12]
 8000af6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000afa:	430b      	orrs	r3, r1
 8000afc:	606b      	str	r3, [r5, #4]
 8000afe:	e78b      	b.n	8000a18 <HAL_RCC_ClockConfig+0x3c>
 8000b00:	40022000 	.word	0x40022000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	08000c98 	.word	0x08000c98
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000b1e:	5cd3      	ldrb	r3, [r2, r3]
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b22:	6810      	ldr	r0, [r2, #0]
}
 8000b24:	40d8      	lsrs	r0, r3
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	08000ca8 	.word	0x08000ca8
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b42:	6810      	ldr	r0, [r2, #0]
}
 8000b44:	40d8      	lsrs	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	08000ca8 	.word	0x08000ca8
 8000b50:	20000000 	.word	0x20000000

08000b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000b54:	b510      	push	{r4, lr}
 8000b56:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000b58:	6803      	ldr	r3, [r0, #0]
 8000b5a:	68c1      	ldr	r1, [r0, #12]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000b62:	430a      	orrs	r2, r1
 8000b64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b66:	6882      	ldr	r2, [r0, #8]
 8000b68:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000b6a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b6c:	4302      	orrs	r2, r0
 8000b6e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000b70:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000b74:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b78:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	69a1      	ldr	r1, [r4, #24]
 8000b82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b86:	430a      	orrs	r2, r1
 8000b88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <UART_SetConfig+0x70>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d115      	bne.n	8000bbc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000b90:	f7ff ffd0 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000b94:	2319      	movs	r3, #25
 8000b96:	4343      	muls	r3, r0
 8000b98:	6862      	ldr	r2, [r4, #4]
 8000b9a:	6820      	ldr	r0, [r4, #0]
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ba2:	2264      	movs	r2, #100	; 0x64
 8000ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ba8:	fb02 3311 	mls	r3, r2, r1, r3
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	3332      	adds	r3, #50	; 0x32
 8000bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000bb8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8000bba:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000bbc:	f7ff ffaa 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8000bc0:	e7e8      	b.n	8000b94 <UART_SetConfig+0x40>
 8000bc2:	bf00      	nop
 8000bc4:	40013800 	.word	0x40013800

08000bc8 <HAL_UART_Init>:
{
 8000bc8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000bca:	4604      	mov	r4, r0
 8000bcc:	b348      	cbz	r0, 8000c22 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000bce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bd6:	b91b      	cbnz	r3, 8000be0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000bd8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8000bdc:	f7ff fb54 	bl	8000288 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000be0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000be2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000be4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8000be8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bf0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000bf2:	f7ff ffaf 	bl	8000b54 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bf6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bf8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bfa:	691a      	ldr	r2, [r3, #16]
 8000bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c08:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c10:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000c12:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c14:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000c16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000c1e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8000c20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
 8000c24:	e7fc      	b.n	8000c20 <HAL_UART_Init+0x58>

08000c26 <memset>:
 8000c26:	4603      	mov	r3, r0
 8000c28:	4402      	add	r2, r0
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d100      	bne.n	8000c30 <memset+0xa>
 8000c2e:	4770      	bx	lr
 8000c30:	f803 1b01 	strb.w	r1, [r3], #1
 8000c34:	e7f9      	b.n	8000c2a <memset+0x4>
	...

08000c38 <__libc_init_array>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	4d0c      	ldr	r5, [pc, #48]	; (8000c70 <__libc_init_array+0x38>)
 8000c3e:	4c0d      	ldr	r4, [pc, #52]	; (8000c74 <__libc_init_array+0x3c>)
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	10a4      	asrs	r4, r4, #2
 8000c44:	42a6      	cmp	r6, r4
 8000c46:	d109      	bne.n	8000c5c <__libc_init_array+0x24>
 8000c48:	f000 f81a 	bl	8000c80 <_init>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	4d0a      	ldr	r5, [pc, #40]	; (8000c78 <__libc_init_array+0x40>)
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <__libc_init_array+0x44>)
 8000c52:	1b64      	subs	r4, r4, r5
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	42a6      	cmp	r6, r4
 8000c58:	d105      	bne.n	8000c66 <__libc_init_array+0x2e>
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c60:	4798      	blx	r3
 8000c62:	3601      	adds	r6, #1
 8000c64:	e7ee      	b.n	8000c44 <__libc_init_array+0xc>
 8000c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6a:	4798      	blx	r3
 8000c6c:	3601      	adds	r6, #1
 8000c6e:	e7f2      	b.n	8000c56 <__libc_init_array+0x1e>
 8000c70:	08000cc4 	.word	0x08000cc4
 8000c74:	08000cc4 	.word	0x08000cc4
 8000c78:	08000cc4 	.word	0x08000cc4
 8000c7c:	08000cc8 	.word	0x08000cc8

08000c80 <_init>:
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c82:	bf00      	nop
 8000c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c86:	bc08      	pop	{r3}
 8000c88:	469e      	mov	lr, r3
 8000c8a:	4770      	bx	lr

08000c8c <_fini>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr
